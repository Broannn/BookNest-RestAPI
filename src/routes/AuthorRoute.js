import express from 'express';
import Author from '../models/authorModel.js'; // Assurez-vous que le chemin est correct
import * as utils from './utils.js'; // Inclure vos utilitaires si nécessaire
import * as config from '../../config.js'; // Inclure la configuration si nécessaire
import debugLib from 'debug';

const debug = debugLib('app:authors');
const router = express.Router();



/**
 * @api {post} /api/authors Create an author
 * @apiName CreateAuthor
 * @apiGroup Author
 * @apiVersion 1.0.0
 * @apiDescription Registers a new author.
 *
 * @apiBody {String} name The name of the author
 * @apiBody {String} [bio] The biography of the author
 * @apiBody {Date} [birthDate] The birth date of the author
 * @apiSuccess (Response body) {String} id A unique identifier for the author generated by the server
 * @apiSuccess (Response body) {String} name The name of the created author
 * @apiSuccessExample {json} 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: https://example.com/api/authors/12345
 *
 *     {
 *       "id": "12345",
 *       "name": "John Doe",
 *       "bio": "An accomplished author.",
 *       "birthDate": "1980-01-01T00:00:00.000Z",
 *       "createdAt": "2025-01-13T10:00:00.000Z"
 *     }
 */
router.post('/', utils.requireJson, (req, res, next) => {
  new Author(req.body)
    .save()
    .then(createdAuthor => {
      debug(`Created author "${createdAuthor.name}"`);
      return createdAuthor;
    })
    .then(createdAuthor => {
      res
        .status(201)
        .set('Location', `${config.baseUrl}/api/authors/${createdAuthor._id}`)
        .send(createdAuthor);
    })
    .catch(next);
});

/**
 * @api {get} /api/authors Retrieve all authors
 * @apiName GetAuthors
 * @apiGroup Author
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a list of all authors.
 *
 * @apiSuccess (Response body) {Object[]} authors List of authors
 * @apiSuccess (Response body) {String} authors.id The author's unique identifier
 * @apiSuccess (Response body) {String} authors.name The author's name
 * @apiSuccessExample {json} 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     [
 *       {
 *         "id": "12345",
 *         "name": "John Doe",
 *         "bio": "An accomplished author.",
 *         "birthDate": "1980-01-01T00:00:00.000Z"
 *       }
 *     ]
 */
router.get('/', (req, res, next) => {
  Author.find()
    .then(authors => {
      res.status(200).send(authors);
    })
    .catch(next);
});

/**
 * @api {get} /api/authors/:id Retrieve a single author
 * @apiName GetAuthorById
 * @apiGroup Author
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a specific author by ID.
 *
 * @apiParam {String} id The unique identifier of the author
 * @apiSuccess (Response body) {String} id The author's unique identifier
 * @apiSuccess (Response body) {String} name The author's name
 * @apiSuccessExample {json} 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "id": "12345",
 *       "name": "John Doe",
 *       "bio": "An accomplished author.",
 *       "birthDate": "1980-01-01T00:00:00.000Z"
 *     }
 * @apiError 404 Author not found
 */
router.get('/:id', (req, res, next) => {
  Author.findById(req.params.id)
    .then(author => {
      if (!author) {
        return res.status(404).send({ error: 'Author not found' });
      }
      res.status(200).send(author);
    })
    .catch(next);
});

/**
 * @api {put} /api/authors/:id Update an author
 * @apiName UpdateAuthor
 * @apiGroup Author
 * @apiVersion 1.0.0
 * @apiDescription Updates an existing author by ID.
 *
 * @apiParam {String} id The unique identifier of the author
 * @apiBody {String} [name] The updated name of the author
 * @apiBody {String} [bio] The updated biography of the author
 * @apiBody {Date} [birthDate] The updated birth date of the author
 * @apiSuccess (Response body) {String} id The author's unique identifier
 * @apiSuccess (Response body) {String} name The updated name of the author
 * @apiSuccessExample {json} 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "id": "12345",
 *       "name": "Jane Doe",
 *       "bio": "Updated biography.",
 *       "birthDate": "1990-01-01T00:00:00.000Z"
 *     }
 * @apiError 404 Author not found
 */
router.put('/:id', utils.requireJson, (req, res, next) => {
  Author.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true })
    .then(updatedAuthor => {
      if (!updatedAuthor) {
        return res.status(404).send({ error: 'Author not found' });
      }
      debug(`Updated author "${updatedAuthor.name}"`);
      res.status(200).send(updatedAuthor);
    })
    .catch(next);
});

/**
 * @api {delete} /api/authors/:id Delete an author
 * @apiName DeleteAuthor
 * @apiGroup Author
 * @apiVersion 1.0.0
 * @apiDescription Deletes an author by ID.
 *
 * @apiParam {String} id The unique identifier of the author
 * @apiSuccessExample {json} 204 No Content
 *     HTTP/1.1 204 No Content
 * @apiError 404 Author not found
 */
router.delete('/:id', (req, res, next) => {
  Author.findByIdAndDelete(req.params.id)
    .then(deletedAuthor => {
      if (!deletedAuthor) {
        return res.status(404).send({ error: 'Author not found' });
      }
      debug(`Deleted author "${deletedAuthor.name}"`);
      res.status(204).send(); // No Content
    })
    .catch(next);
});


export default router;
